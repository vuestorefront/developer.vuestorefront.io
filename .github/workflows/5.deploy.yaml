name: Deploy to Vue Storefront Cloud

on:
  push:
    branches:
      - main
      - beta
      - develop
  workflow_dispatch:
    inputs:
      envName:
        description: 'Deployment to Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write

jobs:
  #  build:
  #    runs-on: ubuntu-latest
  #    steps:
  #      # Checkout the Repository
  #      - name: Checkout code
  #        uses: actions/checkout@v3
  #
  #      # Build the Docker Image
  #      - name: Build and publish docker image
  #        uses: elgohr/Publish-Docker-Github-Action@master
  #        with:
  #          name: developer-storefrontcloud-io/vue-storefront:${{ github.sha }}
  #          registry: registry.vuestorefront.cloud
  #          username: ${{ secrets.CLOUD_USERNAME }}
  #          password: ${{ secrets.CLOUD_PASSWORD }}
  #          dockerfile: .vuestorefrontcloud/docker/Dockerfile
  #          buildoptions: --compress
  #          buildargs: ALGOLIA_TOKEN,ALGOLIA_ID,GITHUB_TOKEN,DEV_TO_TOKEN,GOOGLE_TAG_ID
  #        env:
  #          ALGOLIA_TOKEN: ${{ secrets.ALGOLIA_TOKEN }}
  #          ALGOLIA_ID: ${{ secrets.ALGOLIA_ID }}
  #          GITHUB_TOKEN: ${{ secrets.BUILD_GITHUB_TOKEN }}
  #          DEV_TO_TOKEN: ${{ secrets.BUILD_DEV_TO_TOKEN }}
  #          GOOGLE_TAG_ID: ${{ secrets.GOOGLE_TAG_ID }}
  #
  #      # Send message to Slack about failed build
  #      - name: "Slack Notification - Fail"
  #        if: failure()
  #        uses: rtCamp/action-slack-notify@v2
  #        env:
  #          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #          SLACK_USERNAME: "VSF-Bot"
  #          SLACK_ICON: https://user-images.githubusercontent.com/1626923/182921494-7d6d0fd1-d83a-4b34-9fcc-1285b165c8a0.png
  #          SLACK_TITLE: "Error when building the docker image"
  #          SLACK_FOOTER: "Vue Storefront - GitHub Slack Bot"
  #          SLACK_MESSAGE: "There was an error in the docker image building process for the Developer Portal: ${{env.ENVIRONMENT}}"
  #          SLACK_COLOR: ${{ job.status }}

  deploy:
    runs-on: ubuntu-latest
    #needs: build

    steps:
      - name: Set deployment variables
        id: prepare-envs
        run: |
          if [ "$GITHUB_REF" == "refs/heads/master" ] ||  [ 'production' == "${{ inputs.envName }}" ]; then
              DEPLOY_ENV="production";
              DEPLOY_URL="https://farmer.storefrontcloud.io/instance/developer-europe-west1-gcp-storefrontcloud-io";
          fi
          if [ "$GITHUB_REF" == "refs/heads/staging" ] ||  [ 'staging' == "${{ inputs.envName }}" ]; then
              DEPLOY_ENV="staging";
              DEPLOY_URL="https://farmer.storefrontcloud.io/instance/developer-test-europe-west1-gcp-storefrontcloud-io";
          fi
          if [ "$GITHUB_REF" == "refs/heads/development" ] ||  [ 'development' == "${{ inputs.envName }}" ]; then
              DEPLOY_ENV="development";
              DEPLOY_URL="https://farmer.storefrontcloud.io/instance/developer-beta-europe-west1-gcp-storefrontcloud-io";
          fi
          echo "::set-output name=deploy-env::$DEPLOY_ENV";
          echo "::set-output name=deploy-url::$DEPLOY_URL";

      - name: TEST VARS
        shell: bash
        env:
          DEPLOY_URL: ${{ steps.prepare-envs.outputs.deploy-url }}
          DEPLOY_ENV: ${{ steps.prepare-envs.outputs.deploy-env }}
        run: |
          echo "Deploying to: $DEPLOY_URL"  | sed 's/./& /g'
          echo "Deploying to: $DEPLOY_ENV"  | sed 's/./& /g'
          echo $DEPLOY_URL  | sed 's/./& /g'
          echo $DEPLOY_ENV  | sed 's/./& /g'
          echo ${{ steps.prepare-envs.outputs.deploy-url }}  | sed 's/./& /g'
          echo ${{ steps.prepare-envs.outputs.deploy-env }}  | sed 's/./& /g'
          exit 0

      # Start deployment status
      - name: Create GitHub deployment
        uses: bloodf/github-deploy-action@v1
        id: deployment
        with:
          environment: ${{ needs.dynamic.outputs.deployEnv }}
          environment-url: ${{ needs.dynamic.outputs.deployUrl }}
      # Defining the deployment status
      - name: In-progress Status
        uses: bloodf/github-deploy-status@v1
        with:
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'in_progress'
      # Sending message to Slack Starting process
      - name: "Slack Notification - Starting"
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: "VSF-Bot"
          SLACK_ICON: https://user-images.githubusercontent.com/1626923/182921494-7d6d0fd1-d83a-4b34-9fcc-1285b165c8a0.png
          SLACK_TITLE: 'Developer Portal - Deployment [Starting]'
          SLACK_FOOTER: 'Vue Storefront - GitHub Slack Bot'
          SLACK_MESSAGE: 'Starting the deployment of the Developer Portal: ${{ steps.dynVar.outputs.deployEnv }}'
          SLACK_COLOR: ${{ job.status }}
          MSG_MINIMAL: true
      # Deploying image to VSF Cloud
      - name: Deploy to VSF Cloud
        shell: bash
        env:
          DEPLOY_URL: ${{ steps.dynVar.outputs.deployUrl }}
        run: |
          echo "Deploying to: $DEPLOY_URL"
          OUTPUT=$(curl -s -H 'X-User-Id: ${{ secrets.CLOUD_USERNAME }}'  -H 'X-Api-Key: ${{ secrets.CLOUD_PASSWORD }}' -H 'Content-Type: application/json' -X PATCH -d '{"front_version":"${{ github.sha }}"}' $DEPLOY_URL)
          if echo $OUTPUT | grep -q '"code":200,'; then
            echo "Instance updated"
          else
            echo "Something went wrong during the update process... Response: $OUTPUT"
            exit 1
          fi

      # If deployment was successful
      - name: Success Status
        if: success()
        uses: bloodf/github-deploy-status@v1
        with:
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'
          description: 'Successful deployment to ${{ steps.dynVar.outputs.deployEnv }}'
      # Sending message to Slack for successful deployment
      - name: "Slack Notification - Success"
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: "VSF-Bot"
          SLACK_ICON: https://user-images.githubusercontent.com/1626923/182921494-7d6d0fd1-d83a-4b34-9fcc-1285b165c8a0.png
          SLACK_TITLE: 'Developer Portal - Deployment [Success]'
          SLACK_FOOTER: 'Vue Storefront - GitHub Slack Bot'
          SLACK_MESSAGE: 'The new version of the portal is live at ${{ steps.dynVar.outputs.deployUrl }}'
          SLACK_COLOR: ${{ job.status }}
          MSG_MINIMAL: true
      # If deployment had any errors
      - name: Failure Status
        if: failure()
        uses: bloodf/github-deploy-status@v1
        with:
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'error'
          description: 'There was an error when deploying to the environment: ${{ steps.dynVar.outputs.deployEnv }}'
      # Send message to Slack for failed deployment
      - name: "Slack Notification - Fail"
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: "VSF-Bot"
          SLACK_ICON: https://user-images.githubusercontent.com/1626923/182921494-7d6d0fd1-d83a-4b34-9fcc-1285b165c8a0.png
          SLACK_TITLE: 'Developer Portal - Deployment [Error]'
          SLACK_FOOTER: 'Vue Storefront - GitHub Slack Bot'
          SLACK_MESSAGE: 'There was an error when deploying the developer portal in the environment: ${{ steps.dynVar.outputs.deployEnv }}'
          SLACK_COLOR: ${{ job.status }}
